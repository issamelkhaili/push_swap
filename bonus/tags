!_TAG_FILE_FORMAT 2 / extended format;
--format = 1 will not append;
" to lines/
	!_TAG_FILE_SORTED 1 /
	0 = unsorted,
	1 = sorted,
	2 = foldcase / !_TAG_PROGRAM_AUTHOR Darren Hiebert
		/ dhiebert @users.sourceforge.net /
	!_TAG_PROGRAM_NAME Exuberant Ctags //
		!_TAG_PROGRAM_URL http :
	// ctags.sourceforge.net	/official site/
	!_TAG_PROGRAM_VERSION 5.9 ~svn20110310 //
		calculate_chunk sort_big_bonus.c /
	^static int calculate_chunk(int size) $ /
	;
"	f	file:
	check_input check_input_bonus.c /
	^int check_input(int ac, char **av) $ /
	;
"	f
	check_numbers parsing_bonus.c /
	^static int check_numbers(char *joined_arguments) $ /
	;
"	f	file:
	check_sort checker_bonus.c /
	^static void check_sort(t_stacks *stacks) $ /
	;
"	f	file:
	clean_exit return_error_bonus.c /
	^void clean_exit(t_stacks *stacks) $ /
	;
"	f
	error_exit return_error_bonus.c /
	^void error_exit(t_stacks *stacks) $ /
	;
"	f
	error_free return_error_bonus.c /
	^void error_free(char *joined) $ /
	;
"	f
	execute_instruction checker_bonus.c /
	^static void execute_instruction(t_stacks *stacks, char *line) $ /
	;
"	f	file:
	exit_error return_error_bonus.c /
	^void exit_error(void) $ /
	;
"	f
	fill_stack_a stacks_utils_bonus.c /
	^int fill_stack_a(char *str, t_stacks *stacks) $ /
	;
"	f
	find_max_pos index_utils_bonus.c /
	^static int find_max_pos(t_stacks *stacks) $ /
	;
"	f	file:
	find_smallest_pos sorting_utils_bonus.c /
	^int find_smallest_pos(t_stacks *stacks) $ /
	;
"	f
	free_stacks return_error_bonus.c /
	^void free_stacks(t_stacks *stacks) $ /
	;
"	f
	ft_atol libft_utils_bonus.c /
	^long ft_atol(const char *str) $ /
	;
"	f
	ft_isdigit libft_utils_bonus.c /
	^int ft_isdigit(int c) $ /
	;
"	f
	ft_strcmp parsing_utils_bonus.c /
	^int ft_strcmp(const char *s1, const char *s2) $ /
	;
"	f
	ft_strdup libft_utils_bonus.c /
	^char *ft_strdup(const char *s) $ /
	;
"	f
	ft_strjoin libft_utils_bonus.c /
	^char *ft_strjoin(char *s1, char *s2) $ /
	;
"	f
	has_duplicates stacks_utils_bonus.c /
	^int has_duplicates(int *array, int size) $ /
	;
"	f
	index_stack index_utils_bonus.c /
	^void index_stack(t_stacks *stacks) $ /
	;
"	f
	init_stacks stacks_utils_bonus.c /
	^t_stacks *init_stacks(int size) $ /
	;
"	f
	is_sorted stacks_utils_bonus.c /
	^int is_sorted(t_stacks *stacks) $ /
	;
"	f
	is_valid_argument check_input_bonus.c /
	^int is_valid_argument(char *str) $ /
	;
"	f
	join_arguments parsing_utils_bonus.c /
	^char *join_arguments(int ac, char **av) $ /
	;
"	f
	main checker_bonus.c /
	^int main(int ac, char **av) $ /
	;
"	f
	pa_bonus push_operations_bonus.c /
	^void pa_bonus(t_stacks *stacks) $ /
	;
"	f
	parse_arguments parsing_bonus.c /
	^static char *parse_arguments(int ac, char **av) $ /
	;
"	f	file:
	parse_input parsing_bonus.c /
	^t_stacks *parse_input(int ac, char **av) $ /
	;
"	f
	pb_bonus push_operations_bonus.c /
	^void pb_bonus(t_stacks *stacks) $ /
	;
"	f
	process_instructions checker_bonus.c /
	^static void process_instructions(t_stacks *stacks) $ /
	;
"	f	file:
	push_back_to_a sort_big_bonus.c /
	^static void push_back_to_a(t_stacks *stacks) $ /
	;
"	f	file:
	push_chunks_to_b sort_big_bonus.c /
	^static void push_chunks_to_b(t_stacks *stacks, int chunk_size) $ /
	;
"	f	file:
	push_optimal_b sort_big_bonus.c /
	^static void push_optimal_b(t_stacks *stacks, int target_idx) $ /
	;
"	f	file:
	ra_bonus rotate_operations_bonus.c /
	^void ra_bonus(t_stacks *stacks) $ /
	;
"	f
	rb_bonus rotate_operations_bonus.c /
	^void rb_bonus(t_stacks *stacks) $ /
	;
"	f
	rr_bonus rotate_operations_bonus.c /
	^void rr_bonus(t_stacks *stacks) $ /
	;
"	f
	rra_bonus reverse_rotate_operation_bonus.c /
	^void rra_bonus(t_stacks *stacks) $ /
	;
"	f
	rrb_bonus reverse_rotate_operation_bonus.c /
	^void rrb_bonus(t_stacks *stacks) $ /
	;
"	f
	rrr_bonus reverse_rotate_operation_bonus.c /
	^void rrr_bonus(t_stacks *stacks) $ /
	;
"	f
	sa_bonus swap_operations_bonus.c /
	^void sa_bonus(t_stacks *stacks) $ /
	;
"	f
	sb_bonus swap_operations_bonus.c /
	^void sb_bonus(t_stacks *stacks) $ /
	;
"	f
	set_index index_utils_bonus.c /
	^static void set_index(t_stacks *stacks, int *temp, int i) $ /
	;
"	f	file:
	sort_big sort_big_bonus.c /
	^void sort_big(t_stacks *stacks) $ /
	;
"	f
	sort_five sort_five_bonus.c /
	^void sort_five(t_stacks *stacks) $ /
	;
"	f
	sort_four sort_four_bonus.c /
	^void sort_four(t_stacks *stacks) $ /
	;
"	f
	sort_three sort_three_bonus.c /
	^void sort_three(t_stacks *stacks) $ /
	;
"	f
	sort_two sort_three_bonus.c /
	^static int sort_two(t_stacks *stacks) $ /
	;
"	f	file:
	ss_bonus swap_operations_bonus.c /
	^void ss_bonus(t_stacks *stacks) $ /
	;
"	f
